{"version":3,"file":"static/js/603.f06abf1d.chunk.js","mappings":"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","sources":["components/UI/Tags.jsx","components/Diagnosis/AddDiagnosis.jsx","../node_modules/@mui/material/ToggleButton/toggleButtonClasses.js","../node_modules/@mui/material/ToggleButton/ToggleButton.js","../node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js","../node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js","../node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js"],"sourcesContent":["import { Box, FormControl, ToggleButtonGroup, ToggleButton } from \"@mui/material\";\n\nconst Tags = ({ tags, updateFields }) => {\n  const options = [\n    \"general\",\n    \"heent\",\n    \"cvs\",\n    \"resp\",\n    \"gi\",\n    \"gu\",\n    \"msk\",\n    \"neuro\",\n    \"obgyn\",\n    \"endo\",\n    \"blood\",\n    \"psych\",\n    \"onco\"\n  ];\n\n  function handleTagsChange(e, newTags) {\n    updateFields({ tags: newTags });\n  }\n\n  const control = {\n    value: tags,\n    onChange: handleTagsChange,\n    exclusive: true\n  };\n  return (\n    <Box sx={{ width: \"100%\", margin: \"0 auto\", my: \"10px\" }}>\n      <FormControl sx={{ width: \"80%\" }}>\n        <ToggleButtonGroup {...control} aria-label=\"Tags\">\n          {options.map(option => (\n            <ToggleButton\n              value={option}\n              key={option}\n              sx={{\n                height: \"3.3vh\",\n                boxShadow: \"rgba(0, 0, 0, 0.16) 0px 1px 4px;\"\n              }}>\n              {option}\n            </ToggleButton>\n          ))}\n        </ToggleButtonGroup>\n      </FormControl>\n    </Box>\n  );\n};\nexport default Tags;\n","import { FormControl, Box, Stack, TextField, Button } from \"@mui/material\";\n\nimport { useState, useEffect } from \"react\";\nimport Tags from \"../UI/Tags\";\nimport SymptomSelector from \"../Symptom/SymptomSelector\";\n\nimport useFetch from \"../../hooks/useFetch\";\nimport usePost from \"../../hooks/usePost\";\nimport { useNavigate, useParams } from \"react-router\";\n\nconst INITIAL_DATA = {\n  diagnosis: \"\",\n  age: [0, 100],\n  tags: \"gu\",\n  symptoms: [],\n  associated_symptoms: [],\n  minor: []\n};\n\nconst AddDiagnosis = ({ resource }) => {\n  const allSymptoms = resource.read();\n  const { id } = useParams();\n  document.title = id === \"add\" ? \"Add Diagnosis\" : \"Edit Diagnosis\";\n  const navigate = useNavigate();\n  const { fetchDiagnosis } = useFetch();\n  const { addNewDiagnosis, updateDiagnosis } = usePost();\n\n  const [data, setData] = useState(INITIAL_DATA);\n\n  const [didSubmit, setDidSubmit] = useState(false);\n\n  useEffect(() => {\n    if (didSubmit) {\n      setData(INITIAL_DATA);\n      setDidSubmit(false);\n    }\n  }, [didSubmit]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const dx = await fetchDiagnosis(id);\n      setData(dx);\n    }\n    if (id !== \"add\") fetchData();\n  }, []);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (id === \"add\") {\n      await addNewDiagnosis(data);\n      setDidSubmit(true);\n    } else {\n      await updateDiagnosis(id, data);\n      navigate(\"/diagnoses\");\n    }\n  }\n\n  function updateFields(fields) {\n    setData(prev => {\n      return { ...prev, ...fields };\n    });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Stack spacing={2} sx={{ justifyContent: \"center\", alignItems: \"center\" }}>\n        <Box sx={{ width: \"90%\", margin: \"0 auto\" }}>\n          <Tags tags={data.tags} updateFields={updateFields} />\n        </Box>\n\n        <Box sx={{ width: \"90%\", margin: \"0 auto\" }}>\n          <FormControl sx={{ width: \"100%\" }}>\n            <TextField\n              value={data.diagnosis}\n              size=\"small\"\n              label=\"Diagnosis\"\n              id=\"diagnosis\"\n              onChange={e => updateFields({ diagnosis: e.target.value })}\n            />\n          </FormControl>\n        </Box>\n\n        <SymptomSelector\n          symptoms={data.symptoms}\n          jsonSymptoms={allSymptoms}\n          updateFields={updateFields}\n          label=\"Symptoms\"\n          id=\"symptoms\"\n          didSubmit={didSubmit}\n        />\n        <SymptomSelector\n          symptoms={data.associated_symptoms}\n          jsonSymptoms={allSymptoms}\n          updateFields={updateFields}\n          label=\"Associated Symptoms\"\n          id=\"associated-symptoms\"\n          didSubmit={didSubmit}\n        />\n\n        <SymptomSelector\n          symptoms={data.minor}\n          jsonSymptoms={allSymptoms}\n          updateFields={updateFields}\n          label=\"Minor\"\n          id=\"minor-symptoms\"\n          didSubmit={didSubmit}\n        />\n\n        <FormControl sx={{ margin: \"30px auto\" }}>\n          <Button variant=\"contained\" type=\"submit\" sx={{ width: \"200px\" }}>\n            {id === \"add\" ? \"Add Diagnosis\" : \"Update Diagnosis\"}\n          </Button>\n        </FormControl>\n      </Stack>\n    </form>\n  );\n};\n\nexport default AddDiagnosis;\n\n/* {activeField === \"age\" && (\n          <Stack direction=\"row\" sx={{ width: \"100%\", margin: \"20px auto\" }}>\n            <Typography variant=\"button\" sx={{ ml: \"50px\" }}>\n              Age\n            </Typography>\n            <Slider\n              getAriaLabel={() => \"Age range\"}\n              value={data.age}\n              onChange={(e, newValue) => updateFields({ age: newValue })}\n              valueLabelDisplay=\"auto\"\n              sx={{ width: \"50%\", ml: \"50px\" }}\n            />\n          </Stack>\n        )} */\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getToggleButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButton', slot);\n}\nconst toggleButtonClasses = generateUtilityClasses('MuiToggleButton', ['root', 'disabled', 'selected', 'standard', 'primary', 'secondary', 'sizeSmall', 'sizeMedium', 'sizeLarge']);\nexport default toggleButtonClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"disabled\", \"disableFocusRipple\", \"fullWidth\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"];\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '../styles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport toggleButtonClasses, { getToggleButtonUtilityClass } from './toggleButtonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    fullWidth,\n    selected,\n    disabled,\n    size,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled', fullWidth && 'fullWidth', `size${capitalize(size)}`, color]\n  };\n  return composeClasses(slots, getToggleButtonUtilityClass, classes);\n};\nconst ToggleButtonRoot = styled(ButtonBase, {\n  name: 'MuiToggleButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`size${capitalize(ownerState.size)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  let selectedColor = ownerState.color === 'standard' ? theme.palette.text.primary : theme.palette[ownerState.color].main;\n  let selectedColorChannel;\n  if (theme.vars) {\n    selectedColor = ownerState.color === 'standard' ? theme.vars.palette.text.primary : theme.vars.palette[ownerState.color].main;\n    selectedColorChannel = ownerState.color === 'standard' ? theme.vars.palette.text.primaryChannel : theme.vars.palette[ownerState.color].mainChannel;\n  }\n  return _extends({}, theme.typography.button, {\n    borderRadius: (theme.vars || theme).shape.borderRadius,\n    padding: 11,\n    border: `1px solid ${(theme.vars || theme).palette.divider}`,\n    color: (theme.vars || theme).palette.action.active\n  }, ownerState.fullWidth && {\n    width: '100%'\n  }, {\n    [`&.${toggleButtonClasses.disabled}`]: {\n      color: (theme.vars || theme).palette.action.disabled,\n      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`\n    },\n    '&:hover': {\n      textDecoration: 'none',\n      // Reset on mouse devices\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    [`&.${toggleButtonClasses.selected}`]: {\n      color: selectedColor,\n      backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity),\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity)\n        }\n      }\n    }\n  }, ownerState.size === 'small' && {\n    padding: 7,\n    fontSize: theme.typography.pxToRem(13)\n  }, ownerState.size === 'large' && {\n    padding: 15,\n    fontSize: theme.typography.pxToRem(15)\n  });\n});\nconst ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiToggleButton'\n  });\n  const {\n      children,\n      className,\n      color = 'standard',\n      disabled = false,\n      disableFocusRipple = false,\n      fullWidth = false,\n      onChange,\n      onClick,\n      selected,\n      size = 'medium',\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    disabled,\n    disableFocusRipple,\n    fullWidth,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = event => {\n    if (onClick) {\n      onClick(event, value);\n      if (event.defaultPrevented) {\n        return;\n      }\n    }\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n  return /*#__PURE__*/_jsx(ToggleButtonRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    ownerState: ownerState,\n    \"aria-pressed\": selected\n  }, other, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButton.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is in an active state.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If `true`, the button will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the state changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the button is clicked.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onClick: PropTypes.func,\n  /**\n   * If `true`, the button is rendered in an active state.\n   */\n  selected: PropTypes.bool,\n  /**\n   * The size of the component.\n   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes /* @typescript-to-proptypes-ignore */.any.isRequired\n} : void 0;\nexport default ToggleButton;","// Determine if the toggle button value matches, or is contained in, the\n// candidate group value.\nexport default function isValueSelected(value, candidate) {\n  if (candidate === undefined || value === undefined) {\n    return false;\n  }\n  if (Array.isArray(candidate)) {\n    return candidate.indexOf(value) >= 0;\n  }\n  return value === candidate;\n}","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getToggleButtonGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButtonGroup', slot);\n}\nconst toggleButtonGroupClasses = generateUtilityClasses('MuiToggleButtonGroup', ['root', 'selected', 'vertical', 'disabled', 'grouped', 'groupedHorizontal', 'groupedVertical']);\nexport default toggleButtonGroupClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"disabled\", \"exclusive\", \"fullWidth\", \"onChange\", \"orientation\", \"size\", \"value\"];\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport isValueSelected from './isValueSelected';\nimport toggleButtonGroupClasses, { getToggleButtonGroupUtilityClass } from './toggleButtonGroupClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    orientation,\n    fullWidth,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth'],\n    grouped: ['grouped', `grouped${capitalize(orientation)}`, disabled && 'disabled']\n  };\n  return composeClasses(slots, getToggleButtonGroupUtilityClass, classes);\n};\nconst ToggleButtonGroupRoot = styled('div', {\n  name: 'MuiToggleButtonGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles.grouped\n    }, {\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]\n    }, styles.root, ownerState.orientation === 'vertical' && styles.vertical, ownerState.fullWidth && styles.fullWidth];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  display: 'inline-flex',\n  borderRadius: (theme.vars || theme).shape.borderRadius\n}, ownerState.orientation === 'vertical' && {\n  flexDirection: 'column'\n}, ownerState.fullWidth && {\n  width: '100%'\n}, {\n  [`& .${toggleButtonGroupClasses.grouped}`]: _extends({}, ownerState.orientation === 'horizontal' ? {\n    '&:not(:first-of-type)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    '&:not(:last-of-type)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n      borderLeft: 0,\n      marginLeft: 0\n    }\n  } : {\n    '&:not(:first-of-type)': {\n      marginTop: -1,\n      borderTop: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    '&:not(:last-of-type)': {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n      borderTop: 0,\n      marginTop: 0\n    }\n  })\n}));\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButtonGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiToggleButtonGroup'\n  });\n  const {\n      children,\n      className,\n      color = 'standard',\n      disabled = false,\n      exclusive = false,\n      fullWidth = false,\n      onChange,\n      orientation = 'horizontal',\n      size = 'medium',\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disabled,\n    fullWidth,\n    orientation,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n    onChange(event, newValue);\n  };\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n  return /*#__PURE__*/_jsx(ToggleButtonGroupRoot, _extends({\n    role: \"group\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: React.Children.map(children, child => {\n      if (! /*#__PURE__*/React.isValidElement(child)) {\n        return null;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        if (isFragment(child)) {\n          console.error([\"MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n        }\n      }\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: clsx(classes.grouped, child.props.className),\n        onChange: exclusive ? handleExclusiveChange : handleChange,\n        selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,\n        size: child.props.size || size,\n        fullWidth,\n        color: child.props.color || color,\n        disabled: child.props.disabled || disabled\n      });\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is selected.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   * @default false\n   */\n  exclusive: PropTypes.bool,\n  /**\n   * If `true`, the button group will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default ToggleButtonGroup;"],"names":["_ref","tags","updateFields","control","value","onChange","e","newTags","exclusive","_jsx","Box","sx","width","margin","my","children","FormControl","ToggleButtonGroup","_objectSpread","map","option","ToggleButton","height","boxShadow","INITIAL_DATA","diagnosis","age","symptoms","associated_symptoms","minor","allSymptoms","resource","read","id","useParams","document","title","navigate","useNavigate","fetchDiagnosis","useFetch","_usePost","usePost","addNewDiagnosis","updateDiagnosis","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","didSubmit","setDidSubmit","_handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","preventDefault","stop","apply","arguments","fields","useEffect","_fetchData","_callee","dx","_context","sent","fetchData","onSubmit","_x","_jsxs","Stack","spacing","justifyContent","alignItems","Tags","TextField","size","label","target","SymptomSelector","jsonSymptoms","Button","variant","type","getToggleButtonUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ToggleButtonRoot","styled","ButtonBase","name","overridesResolver","props","styles","ownerState","root","concat","capitalize","_extends2","selectedColorChannel","theme","selectedColor","color","palette","text","primary","main","vars","primaryChannel","mainChannel","_extends","typography","button","borderRadius","shape","padding","border","divider","action","active","fullWidth","_defineProperty","toggleButtonClasses","disabled","disabledBackground","textDecoration","backgroundColor","hoverOpacity","alpha","selectedOpacity","fontSize","pxToRem","React","inProps","ref","useThemeProps","className","_props$color","_props$disabled","_props$disableFocusRi","disableFocusRipple","_props$fullWidth","onClick","selected","_props$size","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","clsx","focusRipple","event","defaultPrevented","isValueSelected","candidate","undefined","Array","isArray","indexOf","getToggleButtonGroupUtilityClass","ToggleButtonGroupRoot","toggleButtonGroupClasses","grouped","orientation","vertical","_ref3","display","flexDirection","marginLeft","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","marginTop","borderTop","_props$exclusive","_props$orientation","handleChange","buttonValue","newValue","index","slice","splice","handleExclusiveChange","role","child"],"sourceRoot":""}