{"version":3,"file":"static/js/939.8a447d7c.chunk.js","mappings":"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","sources":["hooks/useStyles.js","components/Diagnosis/TagsFilter.jsx","pages/Diagnoses.jsx"],"sourcesContent":["export default function useStyles() {\n  const fieldStyles = {\n    color: \"#36454F\",\n    fontFamily: \"Helvetica\",\n    fontSize: \"12px\",\n    \"&:last-child td, &:last-child th\": { border: 0 }\n  };\n  const headerStyles = {\n    color: \"#36454F\",\n    fontFamily: \"Helvetica\",\n    fontSize: \"12px\",\n    fontWeight: \"bold\"\n  };\n\n  const dxKeys = [\"symptoms\", \"associated_symptoms\", \"minor\"];\n  const dxHeaders = [\"Diagnosis\", \"Symptoms\", \"Associated\", \"Minor\", \"Tags\"];\n\n  const sxKeys = [\"symptoms\", \"associated_symptoms\", \"minor\"];\n  const sxHeaders = [\"Symptom\", \"Layman terms\", \"System\", \"Delete\"];\n\n  return { fieldStyles, headerStyles, sxKeys, sxHeaders, dxKeys, dxHeaders };\n}\n","import { Box, FormControl, ToggleButtonGroup, ToggleButton } from \"@mui/material\";\n\nconst TagsFilter = ({ filter, setFilter }) => {\n  const options = [\n    \"all\",\n    \"general\",\n    \"ent\",\n    \"cvs\",\n    \"resp\",\n    \"gi\",\n    \"gu\",\n    \"msk\",\n    \"neuro\",\n    \"obgyn\",\n    \"endo\",\n    \"blood\",\n    \"psych\",\n    \"onco\"\n  ];\n\n  const handleFilterChange = (_, value) => {\n    console.log(value);\n    setFilter(value);\n  };\n\n  const control = {\n    value: filter,\n    onChange: handleFilterChange,\n    exclusive: true\n  };\n\n  return (\n    <Box sx={{ width: \"100%\", margin: \"0 auto\", my: \"20px\", mx: \"10px\" }}>\n      <FormControl sx={{ width: \"100%\" }}>\n        <ToggleButtonGroup {...control} aria-label=\"Tags\">\n          {options.map(option => (\n            <ToggleButton\n              value={option}\n              key={option}\n              sx={{\n                height: \"3.3vh\",\n                boxShadow: \"rgba(0, 0, 0, 0.16) 0px 1px 4px\",\n                borderRadius: \"20px\",\n                borderColor: \"#d9d9d9\",\n                textTransform: \"none\",\n                \"&.Mui-selected\": {\n                  backgroundColor: \"#3f51b5\",\n                  color: \"#fff\",\n                  borderColor: \"#3f51b5\"\n                }\n              }}>\n              {option}\n            </ToggleButton>\n          ))}\n        </ToggleButtonGroup>\n      </FormControl>\n    </Box>\n  );\n};\nexport default TagsFilter;\n","import {\n  Paper,\n  Stack,\n  Typography,\n  TableHead,\n  TableBody,\n  TableContainer,\n  Table,\n  TableRow,\n  TableCell,\n  TablePagination\n} from \"@mui/material\";\nimport { useMemo, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useStyles from \"../hooks/useStyles\";\nimport TagsFilter from \"../components/Diagnosis/TagsFilter\";\n\nconst flattenDiagnoses = allDiagnoses => {\n  return Object.values(allDiagnoses).flatMap(category => Object.values(category));\n};\n\nconst Diagnoses = ({ resource }) => {\n  document.title = \"Diagnoses\";\n  const allDiagnoses = resource.read();\n  const { fieldStyles, headerStyles, sxKeys, dxHeaders: headers } = useStyles();\n  const [filter, setFilter] = useState(\"all\");\n  console.log(filter);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const displayedDiagnoses = useMemo(() => {\n    const filteredDiagnoses =\n      filter === \"all\"\n        ? flattenDiagnoses(allDiagnoses)\n        : flattenDiagnoses(allDiagnoses).filter(diagnosis => diagnosis.tags === filter);\n\n    return filteredDiagnoses\n      .sort((a, b) => a.diagnosis.localeCompare(b.diagnosis))\n      .slice(page * rowsPerPage, (page + 1) * rowsPerPage)\n      .map(diagnosis => ({ ...diagnosis, tags: diagnosis.tags }));\n  }, [allDiagnoses, filter, page, rowsPerPage]);\n\n  const totalDiagnosesCount = useMemo(() => {\n    const filteredDiagnoses =\n      filter === \"all\"\n        ? flattenDiagnoses(allDiagnoses)\n        : flattenDiagnoses(allDiagnoses).filter(diagnosis => diagnosis.tags === filter);\n\n    return filteredDiagnoses.length;\n  }, [allDiagnoses, filter]);\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return (\n    <Stack direction=\"column\">\n      <TagsFilter filter={filter} setFilter={setFilter} />\n      <Paper sx={{ width: \"100%\" }}>\n        <TableContainer>\n          <Table size=\"small\" aria-label=\"Requests Table\">\n            <TableHead>\n              <TableRow>\n                {headers.map(header => (\n                  <TableCell key={header} sx={headerStyles}>\n                    {header === \"Diagnosis\" ? `Diagnosis (${totalDiagnosesCount})` : header}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {displayedDiagnoses.map(dxObj => (\n                <TableRow key={dxObj.id}>\n                  <TableCell key=\"diagnosis\">\n                    <Link to={`${dxObj.id}`}>\n                      <Typography sx={fieldStyles}>{dxObj[\"diagnosis\"]}</Typography>\n                    </Link>\n                  </TableCell>\n                  {sxKeys.map(key => (\n                    <TableCell key={key}>\n                      {dxObj[key].map((s, idx) => (\n                        <Typography\n                          key={`${dxObj[\"diagnosis\"]}-${idx}`}\n                          sx={{ ...fieldStyles, fontSize: \"10px\" }}>\n                          {s.medical_term}\n                        </Typography>\n                      ))}\n                    </TableCell>\n                  ))}\n                  <TableCell key=\"tags\">\n                    <Typography sx={fieldStyles}>{dxObj[\"tags\"]}</Typography>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TablePagination\n            component=\"div\"\n            count={totalDiagnosesCount}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n            labelRowsPerPage=\"Rows per page\"\n            rowsPerPageOptions={[10, 25, 50]}\n          />\n        </TableContainer>\n      </Paper>\n    </Stack>\n  );\n};\n\nexport default Diagnoses;\n"],"names":["useStyles","fieldStyles","color","fontFamily","fontSize","border","headerStyles","fontWeight","sxKeys","sxHeaders","dxKeys","dxHeaders","_ref","filter","setFilter","control","value","onChange","_","console","log","exclusive","_jsx","Box","sx","width","margin","my","mx","children","FormControl","ToggleButtonGroup","_objectSpread","map","option","ToggleButton","height","boxShadow","borderRadius","borderColor","textTransform","backgroundColor","flattenDiagnoses","allDiagnoses","Object","values","flatMap","category","resource","document","title","read","_useStyles","headers","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","page","setPage","_useState5","_useState6","rowsPerPage","setRowsPerPage","displayedDiagnoses","useMemo","diagnosis","tags","sort","a","b","localeCompare","slice","totalDiagnosesCount","length","_jsxs","Stack","direction","TagsFilter","Paper","TableContainer","Table","size","TableHead","TableRow","header","TableCell","concat","TableBody","dxObj","Link","to","id","Typography","key","s","idx","medical_term","TablePagination","component","count","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","labelRowsPerPage","rowsPerPageOptions"],"sourceRoot":""}