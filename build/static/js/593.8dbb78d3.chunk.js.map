{"version":3,"file":"static/js/593.8dbb78d3.chunk.js","mappings":"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","sources":["components/Symptom/AddSymptom.jsx","components/UI/SymptomTags.jsx"],"sourcesContent":["import { FormControl, Box, Stack, TextField, Button } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport useFetch from \"../../hooks/useFetch\";\nimport usePost from \"../../hooks/usePost\";\nimport SymptomTags from \"../UI/SymptomTags\";\n\nconst INITIAL_DATA = {\n  symptom: \"\",\n  medical_term: \"\",\n  tags: \"\"\n};\n\nconst AddSymptom = () => {\n  const { id } = useParams();\n  const [data, setData] = useState(INITIAL_DATA);\n\n  const { addNewSymptom, updateSymptom } = usePost();\n  const { fetchSymptom } = useFetch();\n\n  const history = useNavigate();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (id === \"add\") {\n      await addNewSymptom(data);\n      setData(INITIAL_DATA);\n    } else {\n      await updateSymptom(id, data);\n      history(-1);\n    }\n  }\n\n  async function fetchData() {\n    const sx = await fetchSymptom(id);\n    setData(sx);\n  }\n  useEffect(() => {\n    if (id !== \"add\") {\n      document.title = \"Edit Symptom\";\n      fetchData();\n    } else {\n      document.title = \"Add Symptom\";\n    }\n  }, []);\n\n  function updateFields(fields) {\n    setData(prev => {\n      return { ...prev, ...fields };\n    });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Stack spacing={2} sx={{ justifyContent: \"center\", alignItems: \"center\", mt: \"20px\" }}>\n        <Box sx={{ width: \"90%\", margin: \"0 auto\" }}>\n          <FormControl sx={{ width: \"100%\" }}>\n            <TextField\n              value={data.symptom}\n              size=\"small\"\n              label=\"Symptom\"\n              id=\"symptom\"\n              onChange={e => updateFields({ symptom: e.target.value })}\n            />\n          </FormControl>\n        </Box>\n\n        <Box sx={{ width: \"90%\", margin: \"0 auto\" }}>\n          <FormControl sx={{ width: \"100%\" }}>\n            <TextField\n              value={data.medical_term}\n              size=\"small\"\n              label=\"Medical Term\"\n              id=\"medical-term\"\n              onChange={e => updateFields({ medical_term: e.target.value })}\n            />\n          </FormControl>\n        </Box>\n\n        <Box sx={{ width: \"90%\", margin: \"0 auto\" }}>\n          <SymptomTags tags={data.tags} updateFields={updateFields} />\n        </Box>\n\n        <FormControl sx={{ margin: \"30px auto\" }}>\n          <Button variant=\"contained\" type=\"submit\" sx={{ width: \"200px\" }}>\n            {id === \"add\" ? \"Add Symptom\" : \"Update Symptom\"}\n          </Button>\n        </FormControl>\n      </Stack>\n    </form>\n  );\n};\n\nexport default AddSymptom;\n","import { FormControl, Autocomplete, TextField } from \"@mui/material\";\n\nconst SymptomTags = ({ tags, updateFields, setTagValue, isNew = true }) => {\n  const options = [\n    \"Constitutional/General\",\n    \"Eyes\",\n    \"Ear/Nose/Throat\",\n    \"Cardiovascular\",\n    \"Respiratory\",\n    \"Gastrointestinal\",\n    \"Genitourinary\",\n    \"Gynecological\",\n    \"Peripheral (extremities)\",\n    \"Hematologic/Lymphatic\",\n    \"Hormonal/Endocrinological\",\n    \"Musculoskeletal\",\n    \"Neurological\",\n    \"Psychiatric\",\n    \"Sexual history\",\n    \"Past Medical History\",\n    \"Skin\"\n  ];\n\n  return (\n    <FormControl sx={{ width: \"100%\" }}>\n      <Autocomplete\n        disablePortal\n        autoHighlight\n        size=\"small\"\n        id=\"symptom-tags\"\n        getOptionLabel={option => option}\n        value={tags}\n        options={options}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label=\"Organ System (tags)\"\n            sx={{\n              fontFamily: \"Poppins\",\n              color: \"#36454f\",\n              marginY: \"5px\",\n              fontSize: \"12px\"\n            }}\n            value={tags}\n          />\n        )}\n        onChange={(e, newValue) => {\n          if (isNew) {\n            updateFields({ tags: newValue });\n          } else {\n            setTagValue(newValue);\n          }\n        }}\n        freeSolo\n      />\n    </FormControl>\n  );\n};\n\nexport default SymptomTags;\n"],"names":["INITIAL_DATA","symptom","medical_term","tags","id","useParams","_useState","useState","_useState2","_slicedToArray","data","setData","_usePost","usePost","addNewSymptom","updateSymptom","fetchSymptom","useFetch","history","useNavigate","_handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","preventDefault","stop","apply","arguments","_fetchData","_callee2","sx","_context2","sent","updateFields","fields","_objectSpread","useEffect","document","title","fetchData","_jsx","onSubmit","_x","children","_jsxs","Stack","spacing","justifyContent","alignItems","mt","Box","width","margin","FormControl","TextField","value","size","label","onChange","target","SymptomTags","Button","variant","type","_ref","setTagValue","_ref$isNew","isNew","Autocomplete","disablePortal","autoHighlight","getOptionLabel","option","options","renderInput","params","fontFamily","color","marginY","fontSize","newValue","freeSolo"],"sourceRoot":""}