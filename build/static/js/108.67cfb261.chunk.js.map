{"version":3,"file":"static/js/108.67cfb261.chunk.js","mappings":"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","sources":["components/UI/SymptomTags.jsx","components/Symptom/AddSymptom.jsx","hooks/usePost.js"],"sourcesContent":["import { FormControl, Autocomplete, TextField } from \"@mui/material\";\n\nconst SymptomTags = ({ tags, updateFields, setTagValue, isNew = true }) => {\n  const options = [\n    \"Constitutional/General\",\n    \"Eyes\",\n    \"Ear/Nose/Throat\",\n    \"Cardiovascular\",\n    \"Respiratory\",\n    \"Gastrointestinal\",\n    \"Genitourinary\",\n    \"Gynecological\",\n    \"Peripheral (extremities)\",\n    \"Hematologic/Lymphatic\",\n    \"Hormonal/Endocrinological\",\n    \"Musculoskeletal\",\n    \"Neurological\",\n    \"Psychiatric\",\n    \"Sexual history\",\n    \"Past Medical History\",\n    \"Skin\",\n    \"Other\"\n  ];\n\n  return (\n    <FormControl sx={{ width: \"100%\" }}>\n      <Autocomplete\n        disablePortal\n        autoHighlight\n        size=\"small\"\n        id=\"symptom-tags\"\n        getOptionLabel={option => option}\n        value={tags}\n        options={options}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label=\"Organ System (tags)\"\n            sx={{\n              fontFamily: \"Poppins\",\n              color: \"#36454f\",\n              marginY: \"5px\",\n              fontSize: \"12px\"\n            }}\n            value={tags}\n          />\n        )}\n        onChange={(e, newValue) => {\n          if (isNew) {\n            updateFields({ tags: newValue });\n          } else {\n            setTagValue(newValue);\n          }\n        }}\n        freeSolo\n      />\n    </FormControl>\n  );\n};\n\nexport default SymptomTags;\n","import { FormControl, Box, Stack, TextField, Button } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport useFetch from \"../../hooks/useFetch\";\nimport usePost from \"../../hooks/usePost\";\nimport SymptomTags from \"../UI/SymptomTags\";\n\nconst INITIAL_DATA = {\n  symptom: \"\",\n  medical_term: \"\",\n  tags: \"\"\n};\n\nconst AddSymptom = ({ id }) => {\n  const [data, setData] = useState(INITIAL_DATA);\n\n  const { addNewSymptom, updateSymptom } = usePost();\n  const { fetchSymptom } = useFetch();\n\n  const history = useNavigate();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (id === \"add\") {\n      await addNewSymptom(data);\n      setData(INITIAL_DATA);\n    } else {\n      await updateSymptom(id, data);\n      history(-1);\n    }\n  }\n\n  async function fetchData() {\n    const sx = await fetchSymptom(id);\n    setData(sx);\n  }\n  useEffect(() => {\n    if (id !== \"add\") {\n      document.title = \"Edit Symptom\";\n      fetchData();\n    } else {\n      document.title = \"Add Symptom\";\n    }\n  }, []);\n\n  function updateFields(fields) {\n    setData(prev => {\n      return { ...prev, ...fields };\n    });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Stack spacing={2} sx={{ justifyContent: \"center\", alignItems: \"center\", mt: \"20px\" }}>\n        <Box sx={{ width: \"90%\", margin: \"0 auto\" }}>\n          <FormControl sx={{ width: \"100%\" }}>\n            <TextField\n              value={data.symptom}\n              size=\"small\"\n              label=\"Symptom\"\n              id=\"symptom\"\n              onChange={e => updateFields({ symptom: e.target.value })}\n            />\n          </FormControl>\n        </Box>\n\n        <Box sx={{ width: \"90%\", margin: \"0 auto\" }}>\n          <FormControl sx={{ width: \"100%\" }}>\n            <TextField\n              value={data.medical_term}\n              size=\"small\"\n              label=\"Medical Term\"\n              id=\"medical-term\"\n              onChange={e => updateFields({ medical_term: e.target.value })}\n            />\n          </FormControl>\n        </Box>\n\n        <Box sx={{ width: \"90%\", margin: \"0 auto\" }}>\n          <SymptomTags tags={data.tags} updateFields={updateFields} />\n        </Box>\n\n        <FormControl sx={{ margin: \"30px auto\" }}>\n          <Button variant=\"contained\" type=\"submit\" sx={{ width: \"200px\" }}>\n            {id === \"add\" ? \"Add Symptom\" : \"Update Symptom\"}\n          </Button>\n        </FormControl>\n      </Stack>\n    </form>\n  );\n};\n\nexport default AddSymptom;\n","import axios from \"axios\";\n\n// const baseUrl = \"http://localhost:3001\";\nconst baseUrl = \"https://www.mafishi.io\"; // Nginx proxy endpoint\n\nexport default function usePost() {\n  async function addNewDiagnosis(data) {\n    await axios\n      .post(\"/api/diagnoses\", data)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    alert(\"ADDED Diagnosis.\");\n  }\n\n  async function updateDiagnosis(id, data) {\n    await axios\n      .patch(`/api/diagnoses/${id}`, data)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    alert(\"UPDATED Diagnosis.\");\n  }\n\n  async function deleteDiagnosis(id) {\n    await axios\n      .delete(`/api/diagnosis/${id}`)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    alert(\"DELETED Diagnosis.\");\n  }\n\n  async function addNewSymptom(data) {\n    await axios\n      .post(\"/api/symptoms\", data)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    alert(\"ADDED Symptom.\");\n  }\n\n  async function updateSymptom(id, data) {\n    await axios\n      .patch(`/api/symptoms/${id}`, data)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    alert(\"UPDATED Symptom.\");\n  }\n\n  async function deleteSymptom(id) {\n    await axios\n      .delete(`/api/symptoms/${id}`)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n  }\n\n  return {\n    addNewDiagnosis,\n    updateDiagnosis,\n    deleteDiagnosis,\n    addNewSymptom,\n    updateSymptom,\n    deleteSymptom\n  };\n}\n"],"names":["_ref","tags","updateFields","setTagValue","_ref$isNew","isNew","_jsx","FormControl","sx","width","children","Autocomplete","disablePortal","autoHighlight","size","id","getOptionLabel","option","value","options","renderInput","params","TextField","_objectSpread","label","fontFamily","color","marginY","fontSize","onChange","e","newValue","freeSolo","INITIAL_DATA","symptom","medical_term","_useState","useState","_useState2","_slicedToArray","data","setData","_usePost","usePost","addNewSymptom","updateSymptom","fetchSymptom","useFetch","history","useNavigate","_handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","preventDefault","stop","apply","arguments","_fetchData","_callee2","_context2","sent","fields","useEffect","document","title","fetchData","onSubmit","_x","_jsxs","Stack","spacing","justifyContent","alignItems","mt","Box","margin","target","SymptomTags","Button","variant","type","_addNewDiagnosis","axios","then","res","console","log","catch","err","alert","_updateDiagnosis","concat","_deleteDiagnosis","_callee3","_context3","_addNewSymptom","_callee4","_context4","_updateSymptom","_callee5","_context5","_deleteSymptom","_callee6","_context6","addNewDiagnosis","updateDiagnosis","_x2","_x3","deleteDiagnosis","_x4","_x5","_x6","_x7","deleteSymptom","_x8"],"sourceRoot":""}